(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{63:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return u})),n.d(t,"default",(function(){return p}));var r=n(2),a=n(6),s=(n(0),n(79)),o={id:"supplying-arguments",title:"Supplying arguments",sidebar_label:"Supplying arguments"},i={unversionedId:"supplying-arguments",id:"supplying-arguments",isDocsHomePage:!1,title:"Supplying arguments",description:"Whenever you define a fixture you can optionally define arguments. By adding arguments to your fixture you can allow consumers to control parts of the output of the fixture.",source:"@site/docs\\supplying-arguments.md",slug:"/supplying-arguments",permalink:"/fluse/docs/supplying-arguments",editUrl:"https://github.com/Nayni/fluse/edit/master/website/docs/supplying-arguments.md",version:"current",sidebar_label:"Supplying arguments",sidebar:"docs",previous:{title:"Fixture name",permalink:"/fluse/docs/fixture-name"},next:{title:"Making lists",permalink:"/fluse/docs/making-lists"}},u=[{value:"Passing fixtures as arguments",id:"passing-fixtures-as-arguments",children:[]}],c={rightToc:u};function p(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(s.b)("wrapper",Object(r.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(s.b)("p",null,"Whenever you define a fixture you can optionally define arguments. By adding arguments to your fixture you can allow consumers to control parts of the output of the fixture."),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),'import { fixture } from "fluse";\n\ntype UserFixtureArgs = {\n  username: string;\n};\n\nexport const userFixture = fixture({\n  create(ctx, args: UserFixtureArgs) {\n    const user = new User({ username: args.username });\n    return user;\n  },\n});\n')),Object(s.b)("p",null,"In the example above we are allowing consumers to pass in a username for the created user. We do this by using the second argument of the ",Object(s.b)("inlineCode",{parentName:"p"},"create")," function. For type-safety we created a type for the arguments ",Object(s.b)("inlineCode",{parentName:"p"},"UserFixtureArgs"),"."),Object(s.b)("p",null,"Whenever the fixture is used now it will require additional arguments to be passed in."),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),'import { createExecutor } from "fluse";\n\nconst execute = createExecutor();\nconst result = await execute(\n  userFixture("testUser", { args: { username: "test" } })\n);\n')),Object(s.b)("p",null,"Notice how we pass in a username, as defined by our ",Object(s.b)("inlineCode",{parentName:"p"},"UserFixtureArgs")," type. If you are working in TypeScript Fluse will provide you with type information and in this case even complain if you try to use the fixture without passing in a username."),Object(s.b)("p",null,"Supplying arguments can be very useful for controlling certain parts of a fixture, it is also a vital piece to enable you to ",Object(s.b)("a",Object(r.a)({parentName:"p"},{href:"/fluse/docs/combining-fixtures"}),"combine fixtures"),"."),Object(s.b)("h2",{id:"passing-fixtures-as-arguments"},"Passing fixtures as arguments"),Object(s.b)("p",null,"You may also pass single fixtures as an argument:"),Object(s.b)("pre",null,Object(s.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),'import { createExecutor, fixture } from "fluse";\nimport { Comment } from "./enttiies/Comment";\nimport { Post } from "./entitites/Post";\n\nexport const commentFixture = fixture({\n  create(ctx) {\n    const comment = new Comment({ message: "bar" });\n    return comment;\n  },\n});\n\ntype PostFixtureArgs = {\n  comments: Comment[];\n};\n\nexport const postFixture = fixture({\n  create(ctx, args: PostFixtureArgs) {\n    const post = new Post({\n      title: "foo",\n      comments: args.comments,\n    });\n    return post;\n  },\n});\n\nconst execute = createExecutor();\nconst result = await execute(\n  postFixture("testPost", {\n    args: { comments: commentFixture.asArg({ list: 10 }) },\n  })\n);\n')),Object(s.b)("p",null,"In the above example the ",Object(s.b)("inlineCode",{parentName:"p"},"postFixture")," accepts an argument for ",Object(s.b)("inlineCode",{parentName:"p"},"comments"),". Since we already have a fixture for a single ",Object(s.b)("inlineCode",{parentName:"p"},"comment")," we can use this fixture as a input argument for the ",Object(s.b)("inlineCode",{parentName:"p"},"postFixture"),"."),Object(s.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(s.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-heading"}),Object(s.b)("h5",{parentName:"div"},Object(s.b)("span",Object(r.a)({parentName:"h5"},{className:"admonition-icon"}),Object(s.b)("svg",Object(r.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(s.b)("path",Object(r.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(s.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-content"}),Object(s.b)("p",{parentName:"div"},"Passing fixtures as arguments is useful for nested structures. Note that when passing fixtures as arguments a ",Object(s.b)("inlineCode",{parentName:"p"},"name")," is not required and thus there won't be a named key on the result. In order to access the data generated by this fixture you have to reach into your nested structure yourself (in this case the comments are only available via ",Object(s.b)("inlineCode",{parentName:"p"},"result.testPost.comments"),")."))))}p.isMDXComponent=!0},79:function(e,t,n){"use strict";n.d(t,"a",(function(){return l})),n.d(t,"b",(function(){return f}));var r=n(0),a=n.n(r);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=a.a.createContext({}),p=function(e){var t=a.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=p(e.components);return a.a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),l=p(n),b=r,f=l["".concat(o,".").concat(b)]||l[b]||m[b]||s;return n?a.a.createElement(f,i(i({ref:t},c),{},{components:n})):a.a.createElement(f,i({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=b;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var c=2;c<s;c++)o[c]=n[c];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);